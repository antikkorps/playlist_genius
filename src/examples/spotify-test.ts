import { PlaylistGenius } from "../index"
import dotenv from "dotenv"
import express from "express"
import { writeFileSync, readFileSync, existsSync } from "fs"

dotenv.config()

const PORT = 3000

async function runTests(playlistGenius: PlaylistGenius) {
  try {
    console.log("üéµ Starting test sequence...\n")

    // Test 1: G√©n√©ration de playlist enrichie
    console.log("üìù Test 1: Generating enhanced rock playlist...")
    try {
      const enhancedPlaylist = await playlistGenius.generateEnhancedPlaylist({
        genres: ["rock"],
        mood: "energetic",
        tempo: "fast",
      })

      console.log("‚úì Playlist generation completed")
      console.log("Enhanced playlist details:")
      console.log(
        "- AI Suggestions:",
        enhancedPlaylist.suggestions.songs?.length || 0,
        "songs"
      )
      console.log(
        "- Spotify Tracks:",
        enhancedPlaylist.spotifyTracks?.length || 0,
        "tracks"
      )

      if (enhancedPlaylist.suggestions.songs?.length === 0) {
        console.log("‚ö†Ô∏è Warning: No songs were generated by AI")
      }
      if (enhancedPlaylist.spotifyTracks?.length === 0) {
        console.log("‚ö†Ô∏è Warning: No Spotify tracks were found")
      }

      console.log("\n-------------------\n")

      // Test 2: Analyse des go√ªts utilisateur
      console.log("üéß Test 2: Analyzing user taste...")
      const userTaste = await playlistGenius.analyzeUserTaste("medium_term")

      console.log("‚úì User taste analysis completed")
      console.log("Analysis results:")
      console.log("- Preferred Genres:", userTaste.analysis.preferredGenres.slice(0, 5))
      console.log("- Mood Profile:", userTaste.analysis.moodProfile)
      console.log("- Tempo Distribution:", userTaste.analysis.tempoDistribution)
      console.log("\n-------------------\n")

      // Test 3: G√©n√©ration de playlist personnalis√©e
      console.log("üéº Test 3: Generating personalized playlist...")
      const personalizedPlaylist =
        await playlistGenius.generatePersonalizedPlaylist("user-id")

      console.log("‚úì Personalized playlist generation completed")
      console.log(
        "Generated playlist contains:",
        personalizedPlaylist.songs.length,
        "songs"
      )
      console.log("\n-------------------\n")

      // Test 4: Sauvegarde sur Spotify
      if (enhancedPlaylist.spotifyTracks && enhancedPlaylist.spotifyTracks.length > 0) {
        console.log("üíæ Test 4: Saving playlist to Spotify...")
        const playlistId = await playlistGenius.saveToSpotify(
          "user-id",
          "PlaylistGenius Test Playlist",
          enhancedPlaylist.spotifyTracks
        )
        console.log("‚úì Playlist saved successfully")
        console.log("Playlist ID:", playlistId)
        console.log("\n-------------------\n")
      }

      // Sauvegarder les r√©sultats
      const results = {
        enhancedPlaylist,
        userTaste,
        personalizedPlaylist,
      }

      writeFileSync("test-results.json", JSON.stringify(results, null, 2))
      console.log("‚úÖ All tests completed successfully!")
      console.log("üìÑ Results have been saved to test-results.json")
    } catch (error: any) {
      console.error("‚ùå Error during test execution:")
      console.error("Error message:", error.message)
      if (error.stack) {
        console.error("Stack trace:", error.stack)
      }
      throw error // Re-throw to be caught by the outer try-catch
    }
  } catch (error) {
    console.error("‚ùå Test sequence failed:", error)
    process.exit(1)
  }
}

async function startAuthFlow() {
  if (
    !process.env.OPENAI_API_KEY ||
    !process.env.SPOTIFY_CLIENT_ID ||
    !process.env.SPOTIFY_CLIENT_SECRET
  ) {
    console.error(
      "Please set OPENAI_API_KEY, SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET in your .env file"
    )
    process.exit(1)
  }

  const playlistGenius = new PlaylistGenius(process.env.OPENAI_API_KEY, {
    clientId: process.env.SPOTIFY_CLIENT_ID,
    clientSecret: process.env.SPOTIFY_CLIENT_SECRET,
    redirectUri: `http://localhost:${PORT}/callback`,
  })

  // V√©rifier les tokens existants
  const tokenPath = ".spotify-tokens.json"
  if (existsSync(tokenPath)) {
    try {
      const tokens = JSON.parse(readFileSync(tokenPath, "utf8"))
      playlistGenius.setSpotifyTokens(tokens)
      await runTests(playlistGenius)
      return
    } catch (error) {
      console.log("Stored tokens are invalid, starting new authentication...")
    }
  }

  // Configurer le serveur Express pour l'authentification
  const app = express()
  let server: ReturnType<typeof app.listen>

  app.get("/start", (req, res) => {
    const authUrl = playlistGenius.getSpotifyAuthUrl()
    res.redirect(authUrl)
  })

  app.get("/callback", async (req, res) => {
    const { code } = req.query

    if (!code || typeof code !== "string") {
      res.send("Error: No code provided")
      return
    }

    try {
      console.log("üìù Processing authentication callback...")
      const tokens = await playlistGenius.handleSpotifyAuth(code)
      console.log("‚úì Authentication successful - tokens received")

      writeFileSync(tokenPath, JSON.stringify(tokens))
      console.log("‚úì Tokens saved to file")

      res.send("Authentication successful! You can close this window.")

      console.log("üéµ Starting tests sequence...")
      server.close(() => {
        console.log("‚úì Server closed successfully")
        runTests(playlistGenius)
          .then(() => {
            console.log("‚úÖ Test sequence completed")
            process.exit(0)
          })
          .catch((error) => {
            console.error("‚ùå Test sequence failed:", error)
            process.exit(1)
          })
      })
    } catch (error) {
      console.error("‚ùå Authentication error:", error)
      res.send("Authentication failed. Please try again.")
    }
  })

  // D√©marrer le serveur
  server = app.listen(PORT, () => {
    const authUrl = `http://localhost:${PORT}/start`
    console.log("\nüéµ Starting Spotify authentication...")
    console.log("\nPlease visit this URL in your browser to authenticate with Spotify:")
    console.log("\x1b[36m%s\x1b[0m", authUrl) // URL en cyan
    console.log("\nWaiting for authentication...\n")
  })
  // D√©marrer le processus
  console.log("üöÄ Starting PlaylistGenius test sequence")
  startAuthFlow().catch((error) => {
    console.error("‚ùå Fatal error:", error)
    process.exit(1)
  })
}

// D√©marrer le processus
startAuthFlow()
